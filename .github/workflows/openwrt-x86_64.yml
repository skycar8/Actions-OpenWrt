name: Build OpenWrt

on:
  repository_dispatch:
  release:
    types: published
  push:
    branches:
      - master
    paths:
      - '.config'
#  schedule:
#    - cron: 0 8 * * 5
  watch:
    types: started


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# 环境变量说明
#
# REPO_URL              源码仓库地址
# REPO_TAG              源码Tag
# CONFIG_FILE           默认.config文件，你可以上传多个，比如x86_64.config、Arm64.config
# BUILD_PACKAGE         只编译某个package
# DIY_SH                DIY 脚本文件名
# SSH_ACTIONS           包含所有 ipk 文件和固件的目录，默认 false
# UPDATE_CONFIG         是否更新config文件，如果通过ssh修改了config文件并希望永久生效请设置为true，默认 false
# UPLOAD_BIN_DIR        上传 bin 目录（包含所有 ipk 文件和固件的目录），默认 false
# UPLOAD_FIRMWARE       只上传固件目录（不包含ipk），默认 true
# UPLOAD_COWTRANSFER    上传固件到奶牛快传，默认 true
# UPLOAD_WETRANSFER     上传固件到 WeTransfer，默认 false
# TIMEZONE              时区设置，默认 Asia/Shanghai
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
env:
  REPO_URL: https://git.openwrt.org/openwrt/openwrt.git   
  # REPO_TAG: v19.07.2
  CONFIG_FILE: x86_64.config
  # BUILD_PACKAGE: 
  DIY_SH: diy.sh
  SSH_ACTIONS: false
  UPDATE_CONFIG: true
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: false
  TIMEZONE: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        # swapoff命令用于关闭系统交换区
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        # 加上-E选项后，用户可以在sudo执行时保留当前用户已存在的环境变量，不会被sudo重置
        sudo -E apt-get -y update
        sudo -E apt-get -y install subversion build-essential libncurses5-dev zlib1g-dev gawk git ccache gettext libssl-dev xsltproc zip
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TIMEZONE"

    - name: Clone source code
      run: git clone $REPO_URL openwrt

    - name: Pre config
      run: |
        cd openwrt
        if [ $REPO_TAG ]; then git checkout $REPO_TAG; fi;
        echo "src-git Mine https://github.com/skycar8/OpenWrt-Packages.git" >> ./feeds.conf.default

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a
    
    # 必须在feeds install之后导入.config，否则会被覆盖
    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && cp $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        ../$DIY_SH

    - name: Waiting for SSH connection...
      uses: skycar8/action-tmate@v2
      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        echo "=============================================="
        echo "Packages failed to downloaded:"
        find dl -size -1024c -exec ls -l {} \;
        echo "=============================================="
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "=============================================="
        echo "Space usage:"
        echo "=============================================="
        df -h
        echo "=============================================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: success() && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: success()
      run: |
        if [ ! -e openwrt/bin/targets/*/* ]; then exit 1; fi;
        if [ $(find openwrt/bin/targets/*/* -name '*.gz' -size +10M | wc -l) -lt 1 ]; then exit 1; fi;
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::${PWD}/openwrt-x86-64-generic-ext4-combined.vmdk.gz"
        echo "::set-output name=status::success"
    
    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}

    - name: Update config file
      if: steps.organize.outputs.status == 'success' && !cancelled() && env.UPDATE_CONFIG == 'true'
      run: |
        mv $CONFIG_FILE ${CONFIG_FILE}.bak
        cp openwrt/.config $CONFIG_FILE
        git config user.name "GitHub Actions"
        git config user.email "tmp@tmp.com"
        git add $CONFIG_FILE
        git add ${CONFIG_FILE}.bak
        git commit -m "Update $CONFIG_FILE By GitHub Actions"
        git push

    - name: Upload firmware to cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 99 -t 3 --hash --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"

    - name: Upload firmware to WeTransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
